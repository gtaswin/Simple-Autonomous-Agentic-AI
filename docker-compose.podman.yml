version: '3.8'

# Podman-optimized compose file
# Usage: podman-compose -f docker-compose.podman.yml up -d

services:
  # Main AI Agent Backend
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://postgres:password@postgres:5432/agent_db
      - LANCEDB_URI=./data/memory.lance
      - OPENAI_API_KEY=${OPENAI_API_KEY:-demo}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-demo}
      - GEMINI_API_KEY=${GEMINI_API_KEY:-demo}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY:-demo}
      - TAVILY_API_KEY=${TAVILY_API_KEY:-demo}
      - E2B_API_KEY=${E2B_API_KEY:-demo}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-http://host.containers.internal:11434}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-true}
    volumes:
      - ./data:/app/data
      - ./backend:/app
      - ./backend/config:/app/config
    depends_on:
      - redis
      - postgres
    restart: unless-stopped

  # Next.js Frontend Dashboard  
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
      - NODE_ENV=${NODE_ENV:-development}
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    restart: unless-stopped

  # Redis for caching and message queuing
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    restart: unless-stopped

  # PostgreSQL for structured data storage
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=agent_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped

  # LanceDB Vector Database Service
  lancedb:
    image: python:3.12-slim
    ports:
      - "8001:8001"
    working_dir: /app
    environment:
      - LANCEDB_PORT=8001
      - LANCEDB_DATA_DIR=/app/data/lancedb
    volumes:
      - ./data/lancedb:/app/data/lancedb
      - ./backend/database/lancedb_server.py:/app/server.py
    command: |
      sh -c "
        pip install lancedb fastapi uvicorn pandas pyarrow &&
        python server.py
      "
    restart: unless-stopped